#Problem Set 1 - Problem 5

from visual import *

#initializes the ball and all of the walls
ball = sphere(pos=(0.1, 0.1, 2), radius=0.5, color=color.cyan)
wallR = box(pos=(6, 0, 0), size=(0.2, 12, 12), color=color.green)
wallL = box(pos=(-6, 0, 0), size=(0.2, 12, 12), color=color.green)
wallT = box(pos=(0, 6, 0), size=(12, 0.2, 12), color=color.blue)
wallB = box(pos=(0, -6, 0), size=(12, 0.2, 12), color=color.blue)
wallBack = box(pos=(0, 0, -6), size=(12, 12, 0.2), color=color.red)

gravity_factor = -10 #a factor for gravity (negative as objects accelerate TOWARDS the source of gravity)

def find_gravity(orb): #returns the gravity at a point away from the origin
    grav_x = gravity_factor / (ball.pos.x ** 2)
    grav_y = gravity_factor / (ball.pos.y ** 2)
    grav_z = gravity_factor / (ball.pos.z ** 2)
    return vector(grav_x, grav_y, grav_z)

accel_due_to_gravity = find_gravity(ball) #finds the initial acceleration due to gravity
#accel_due_to_gravity = -500.0 #constant gravity if you want it directed downwards
ball.velocity = vector(2, 0, 0)
deltat = 0.005
t = 0
vscale = 0.1
varr = arrow(pos=ball.pos, axis=ball.velocity * vscale, color=color.yellow)
ball.trail = curve(color=ball.color)
scene.autoscale = False
while True:
    rate(100)
    ball.trail.append(pos=ball.pos)
    ball.pos = ball.pos + ball.velocity*deltat
    varr.axis = ball.velocity * vscale
    varr.pos = ball.pos
    t += deltat
    #ball.velocity.y += accel_due_to_gravity * deltat #used if gravity is constant in magnitude and direction

    #changes velocity in each direction depending on the acceleration due to position
    ball.velocity.x += accel_due_to_gravity.x * deltat
    ball.velocity.y += accel_due_to_gravity.y * deltat
    ball.velocity.z += accel_due_to_gravity.z * deltat

    #switches the trajectory of the ball if it passes a wall
    if ball.pos.x > wallR.pos.x or ball.pos.x < wallL.pos.x:
        ball.velocity.x *= -1.0
    if ball.pos.y > wallT.pos.y or ball.pos.y < wallB.pos.y:
        ball.velocity.y *= -1.0
    if ball.pos.z < wallBack.pos.z or ball.pos.z > 6:
        ball.velocity.z *= -1.0
