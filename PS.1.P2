#Problem Set 1 - Problem 2

from datetime import datetime
from random import randint

def sorts(unsorted_list, distance, factor, iterations):
    swapped = False     #sets a switch to determine if the any swaps have occured
    for counter in range (0, len(unsorted_list) - distance):
        if unsorted_list[counter + distance] < unsorted_list[counter]:  #if the latter number is larger, swaps the two
            temp = unsorted_list[counter + distance]
            unsorted_list[counter + distance] = unsorted_list[counter]
            unsorted_list[counter] = temp
            swapped = True #tells if any swaps have occured that iteration
    if not swapped and distance == 1: #if no swaps have occured and compare distance is one, ends the loop
        return [unsorted_list, iterations]
    else:   #lowers the step size if greater than one
        new_jump_size = int(distance / factor)
        if new_jump_size <= 1:
            return sorts(unsorted_list, 1, 1, iterations + 1)
        else:
            return sorts(unsorted_list, new_jump_size, factor, + iterations + 1) 

def comb_sort(unsorted_list):    #calls a comb sort with a scale factor and determined step size
    return sorts(unsorted_list, int(len(unsorted_list) / 1.3), 1.3, 0)

def bubble_sort(unsorted_list):  #calls a generic bubble sort
    return sorts(unsorted_list, 1, 1, 0)

def sort_times(unsorted_lists): #counts the total time and number of iterations each sort takes on 1000 arrays of 10 random digits
    bubble_iterations = 0
    comb_iterations = 0
    start_time = datetime.now().microsecond
    for unsorted_list in unsorted_lists:
        bubble_iterations += bubble_sort(unsorted_list)[1]
    mid_time = datetime.now().microsecond
    for unsorted_list in unsorted_lists:
        comb_iterations += comb_sort(unsorted_list)[1]
    end_time = datetime.now().microsecond
    return [mid_time - start_time, end_time - mid_time, bubble_iterations, comb_iterations]
    
matrix = [] #creates an array of 1000 arrays of 10 randomized digits to test the sorting algorithms
for counter in range(0, 1000):
    temp_list = []
    for i in range(0, 10):
        temp_list.append(randint(1, 101))
    matrix.append(temp_list)

times = sort_times(matrix)
print times
print "The average time for the bubble sort was " + str(times[0] / 1000.0) + " microseconds with an average of " + str(times[2] / 1000.0) + " iterations per sort."
print "The average time for the comb sort was " + str(times[1] / 1000.0) + " microseconds with an average of " + str(times[3] / 1000.0) + " iterations per sort."
print "The comb sort was on average " + str(times[0] * 1.0 / times[1]) + " times faster than the quick sort."
